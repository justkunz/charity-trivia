{
  "name": "okay",
  "version": "0.3.0",
  "description": "error check nested callbacks with domain support",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": "",
  "keywords": [
    "domain domains"
  ],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "sliced": "0.0.5"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "readme": "# okay\n\nBubble errors back up your big ol' nested callback chain.\n\nIf domains are in use, defer the error to the domain's error handler by using `process.domain.intercept` transparently.\n\n## without okay\n```js\nvar doSomething = function(path, callback) {\n  fs.readDir(function(err, files) {\n    if(err) return callback(err);\n    async.map(files, fs.readFile, function(err, contents) {\n      if(err) return callback(err);\n      return callback(null, contents.join('\\n'));\n    });\n  });\n};\n```\n\n## with okay\n```js\nvar ok = require('okay');\nvar doSomething = function(path, callback) {\n  //if path exists, bubble the error out to the \n  //callback function right away\n  //if there was no error, call the new error-less callback\n  fs.readDir(path, ok(callback, function(files)){\n    \n    //if there was an error reading any file, bubble the error out to the\n    //callback function right away\n    //if there was no error, call the new error-less callback\n    async.map(files, fs.ReadFile, ok(callback, function(contents) {\n      return callback(null, contents.join('\\n'));\n    }));\n  });\n};\n\n//okay also supports a single callback\nvar doSomethingOrDie = function(path, callback) {\n  //if there is an error with fs.readDir, THROW it\n  //if there was no error, call the new error-less callback\n  fs.readDir(path, ok(function(files) {    \n    //if there was an error reading any file, THROW it\n    //if there was no error, call the new error-less callback\n    async.map(files, fs.ReadFile, ok(function(contents) {\n      return callback(null, contents.join('\\n'));\n    }));\n  });\n};\n\n```\n\n## domains\n\nThrowing errors is _probably_ not what you want to do.\n\n`Okay` comes in __really handy__ if you are using [domains](http://nodejs.org/api/domain.html).  It transparently passes the error back into the active domain if it exists, or it calls your callback with the error parameter already removed in the happy circumstance where there is no error.  It's basically shorthand for `process.domain.intercept` but will fall back to throwing exceptions if domains are not activated or you're currently not bound to a domain.\n\n```js\nvar ok = require('okay');\nvar domain = require('domain');\nvar count = 0;\nvar handler = function(req, res) {\n  var requestDomain = domain.create();\n  req.id = new Date() + (count++);\n  requestDomain.add(req);\n  requestDomain.add(res);\n  requestDomain.on('error', function(err) {\n    console.log('error handling request ' + req.id);\n    console.log(err);\n    try {\n      res.end(500);\n    } catch(e) {\n      console.log('could not send response 500 code');\n    }\n  });\n  process.nextTick(function() {\n    setTimeout(function() {\n      //read some missing file to cause an error\n      //the error will fire on the request's domain\n      //and WILL NOT crash the server\n      if(count % 2) {\n        fs.readFile('omsdflksjdflsk', ok(function(contents) {\n          res.writeHead(200);\n          res.end('ok');\n        }));\n      } else {\n        //this exception will fire on the request's domain\n        //as well and will also NOT crash the server\n        process.nextTick(ok(function() {\n          throw new Error(\"I Broke it.\")\n        }));\n      }\n    }, 1000);\n  })\n}\n\nvar serverDomain = domain.create();\nserverDomain.on('error', function(e) {\n  console.log('something happened with the server!')\n  console.log(e);\n});\nserverDomain.run(function() {\n  var http = require('http');\n  var server = http.createServer(handler);\n  server.listen(80);\n});\n```\n\n## express + okay\n```js\nvar ok = require('okay');\nget('/', function(req, res, next) {\n  fs.readFile('file.txt', 'utf8', ok(next, function(contents)) {\n    res.send(contents);\n  });\n});\n```\n\n## coffee-script + express + okay\n```coffee-script\nok = require \"okay\"\napp.get \"/\", (req, res, next) ->\n  fs.readFile \"file.txt\", \"utf8\", ok next, (contents) ->\n    res.send(contents)\n```\n\n## mocha + okay\n```js\nvar ok = require('okay');\ndescribe('a directory', function() {\n  it('exists', function(done) {\n    fs.readdir(__dirname, ok(done, function(files){\n      assert.equal(1, files.length);\n      done();\n    }));\n  });\n});\n```\n\ncode golf, baby.\n\n## license\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "okay@0.3.0",
  "dist": {
    "shasum": "de2840310df9805d6c0506d8dbb8d9ba09129d28"
  },
  "_from": "okay@~0.3.0",
  "_resolved": "https://registry.npmjs.org/okay/-/okay-0.3.0.tgz"
}
